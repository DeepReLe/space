run
compile
build
~run
~test
run
test
run
compile
test
~run
~compile
run
stage
run
~run
shell
compile
~run
run
~run
~test
test
~test
compile
run
test
~run
compile
test
run
test
~run
run
compile
console
set scalaVersion := "2.10.3" // or 2.11.3
set libraryDependencies += "org.scalanlp" %% "breeze" % "0.10"
set resolvers += "Sonatype Releases" at "https://oss.sonatype.org/content/repositories/releases/"
run
compile
update
compile
run
compile
run
compile
~compile
run
test
~compile
run
test
update
compile
~compile
test
~compile
~test
~compile
test
~test
compile
~test
compile
test
compile
test
compile
test
clean
reload
!:
45
clean
compile
run
console
run
console
compile
test
compile
test
console
compile
console
clean
update
compile
test
compile
test
compile
test
console
compile
run
test
~test
test
test:test
test
clear
test
console
test
console
run
<<<<<<< HEAD
=======
console
compile
run
test
compile
test
compile
run
test
compile
run
test
console
test
stop at MyAdder.scala:129
clean
compile
run
>>>>>>> e95b030858b528ab4bed7c94e367471c022143c3
test
reload
clean
compile
run
test
~test
test
~test
test
~test
clean
last *:projectDescriptors
compile
run
test
~test
tasks
doc
test
~test
console
test
console
run
~run
console
val g = GetRandomDirection(breeze.linalg.DenseMatrix.eye[Double](100),7)
test
console
test
console
update
compile
run
test
GetNewPoint
console
clean
update
clean
compile
run
test
update &&build
build
update
test
compile
run
test
build
compile
update
compile
run
test
compile
run
test
compile
test
compile
run
test
run
compile
update
compile
~compile
~test
test-only MaximumOutputSpec
compile
test
test-only MaximumOutputSpec
test-only GetRandomDirectionSpec
test-only GetRandomDirectionSpec-GetRandomDirection
test-only GetRandomDirectionSpec
test
compile
test
test-only PointStreamSpec should generate 10000000 points( per alpha) in a direction progression where alpha is increasing in the xy direction.
test-only PointStreamSpec.PointStream should generate 10000000 points( per alpha) in a direction progression where alpha is increasing in the xy direction.
test-only PointStreamSpec.PointStreamXY
test
test-only PointStreamSpec.PointStreamXY
test-only bbdl.space.PointStreamSpec.PointStreamXY
test-only bbdl.space
test-only bbdl.space.PointStreamSpec
test
run 100
run 10
compile
run 10000000
run 100
compile
run 100
run 1000
run 10000
run 1000
test
run 1000
run 10000
run 100
